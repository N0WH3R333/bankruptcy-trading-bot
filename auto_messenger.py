"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import asyncio
import logging
from datetime import datetime
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
from config import TELEGRAM_BOT_TOKEN, SPECIALIST_CONTACTS
from database import DatabaseManager
from log_config import setup_logging

logger = setup_logging('auto_messenger')

class AutoMessenger:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.db_manager = DatabaseManager()
        
    def get_auto_message_text(self, message_type: str) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É"""
        if message_type == '1hour':
            text = """ü§î –û—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ—Ä–≥–∞–º –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É?

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! 

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
‚Ä¢ –ò–∑—É—á–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
            
            keyboard = [
                [InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
                [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º", callback_data="contact_specialist")],
                [InlineKeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data="knowledge_base")]
            ]
            
        elif message_type == '3days':
            text = f"""üèõÔ∏è –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ—Ä–≥–∞—Ö –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É

–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º –æ—Ç—ã–≥—Ä–∞—Ç—å –ª—é–±–æ–π –ª–æ—Ç –¥–ª—è –ª—é–±—ã—Ö —Ü–µ–ª–µ–π!

üìû –¢–µ–ª–µ—Ñ–æ–Ω: {SPECIALIST_CONTACTS['phone']}
üí¨ Telegram: {SPECIALIST_CONTACTS['telegram']}

–ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–º–æ–≥—É—Ç:
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–æ—Ç
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ç–æ—Ä–≥–æ–≤
‚Ä¢ –†–µ—à–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫—É
‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —á–∏—Å—Ç–æ—Ç–µ –∏–º—É—â–µ—Å—Ç–≤–∞
‚Ä¢ –ó–∞—Ä–∞–Ω–µ–µ —É–∑–Ω–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –æ—Å–º–æ—Ç—Ä
–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å!"""
            
            keyboard = [
                [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º", callback_data="contact_specialist")],
                [InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
                [InlineKeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data="knowledge_base")]
            ]
        
        else:
            return None, None
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        return text, reply_markup
    
    async def send_auto_message(self, user_id: int, message_type: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            text, reply_markup = self.get_auto_message_text(message_type)
            if not text:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
                return False
            
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup
            )
            
            logger.info(f"–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ {message_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except TelegramError as e:
            if "Forbidden" in str(e) or "bot was blocked" in str(e).lower():
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def process_pending_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            pending_messages = self.db_manager.get_pending_auto_messages()
            
            for message_id, user_id, message_type, scheduled_time in pending_messages:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                success = await self.send_auto_message(user_id, message_type)
                
                # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.db_manager.mark_auto_message_sent(message_id)
                
                if success:
                    logger.info(f"–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
        while True:
            try:
                await self.process_pending_messages()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    messenger = AutoMessenger()
    asyncio.run(messenger.run_scheduler())
